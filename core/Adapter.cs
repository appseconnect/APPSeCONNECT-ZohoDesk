using InSync.eConnect.APPSeCONNECT.API;
using InSync.eConnect.APPSeCONNECT.Helpers;
using InSync.eConnect.APPSeCONNECT.Object;
using InSync.eConnect.APPSeCONNECT.Plugin;
using InSync.eConnect.APPSeCONNECT.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Xml;
using System.Xml.Linq;

namespace InSync.eConnect.ZohoDesk
{
    /// <summary>
    ///     Represents the main class for accessing an adapter. Pulls and/or Pushes data from one application.
    /// </summary>
   public class Adapter : IAdapter, IRealTimeProcessor
    {
        private AppResource _resource = null;
        private ApplicationContext _context = null; 

        public Adapter()
        {
       
        }

        #region AutoGeneratedCode

        public void Initialize(ApplicationContext context)
        {
            this._context = context;
            this._resource = new AppResource(context);
        }
        
        
        IPlugin Storage
        {
           get 
           {
                return this._context.ApplicationUtility.TransactionalDataStore.ConnectionManager;
           }
        }

        public RealtimeContext Request
        {
            get;
            set;
        }
        
        public IAppResource Resource
        {
            get { return this._resource; }
        }

        public ReturnMessage<bool> ValidateProcess(ExecutionSettings settings)
        {
            var retResult = new ReturnMessage<bool>(false, "Execution unsuccesful");
            //Todo : Validate the process  and return true if the process is valid.
            return retResult;
        }

        public ReturnMessage<string> Execute(ExecutionSettings settings)
        {
            var retResult = new ReturnMessage<string>(string.Empty, "Execution unsuccesful");
            switch (settings.ExecutionType)
            {
                case OperationType.GET:
                    retResult = ExecuteGetOperation(settings);
                    break;
                case OperationType.POST:
                    retResult = this.ExecutePostOperation(settings);
                    break;

            }
            return retResult;
        }

        #endregion

        # region Implementation

        private ReturnMessage<string> ExecutePostOperation(ExecutionSettings settings)
        {
            var returnMessage = new ReturnMessage<string>();
            try
            {
                var logger = this._context.ApplicationUtility.Logger;
                string entityName = settings.EntityName;
                string actionName = settings.ActionName;
                var credential = this.GetCredential();
                IEnumerable<XElement> elements = null;
                string responseData = string.Empty;
                WebUtils webUtil = new WebUtils();

                logger.StatusLog("Trying to push data to ZohoDesk application", "Inside Adapter POST");
                var requestData = settings.TransformedResponse; 
                
                try
                {
                    elements = XElement.Parse(requestData).Elements();
                }
                catch(Exception ex)
                {
                    logger.ErrorLog("Error in transformed data", ex);
                    returnMessage.SetError("Error in transformed data", ex.Message);
                    return returnMessage;
                }

                var outputs = new XElement("items");
                var dataIndex = 0;
                logger.StatusLog("Starting to process post operation", $"Found {elements.Count()} items to process from transformed source");
                foreach (XElement element in elements)
                {
                    if (element.HasElements)
                    {
                        var httpResponse = webUtil.HttpPostRequest(element, settings, actionName, credential, this._context.ApplicationUtility, logger);
                        if (!httpResponse.Status) // If Has Error
                        {
                            if (httpResponse.Message.Equals("401")) // Retry
                            {
                                webUtil.UpdateAccessToken(credential, this._context.ApplicationUtility);
                                httpResponse = webUtil.HttpPostRequest(element, settings, actionName, credential, this._context.ApplicationUtility, logger);
                            }
                        }

                        if (!httpResponse.Status)
                        {
                            settings.AssignErrorEntity(dataIndex, "", httpResponse.Value);
                            logger.ErrorLog("Zoho Desk rejected the request", httpResponse.Value);
                        }
                        else
                        {
                            var dataelement = XElement.Parse(httpResponse.Value);
                            var destinationKey = webUtil.GetElementData(dataelement, settings.PrimaryKeyField, logger, "Success");
                            settings.AssignSuccessEntity(dataIndex, destinationKey, "Data pushed successfully");
                            outputs.Add(dataelement);
                            logger.StatusLog($"Data pushed successfully for {destinationKey}", httpResponse.Value);
                        }
                    }
                    else
                    {
                        logger.StatusLog("No data found for Post Operation", element.ToString());
                    }

                    dataIndex++;
                }
                returnMessage.Value = outputs.ToString();


                returnMessage.SetSuccess("Data push operation completed successfully");
            }
            catch(Exception ex)
            {
                returnMessage.SetError("Data is not posted to Zoho Desk", ex.Message); 
            }
            return returnMessage;
        }

        private ReturnMessage<string> ExecuteGetOperation(ExecutionSettings settings)
        {
            var returnMessage = new ReturnMessage<string>();
            var returnData = new ReturnMessage<string>();
            var logger = this._context.Logger;
            logger.StatusLog("Trying to pull data from Zoho Desk application", "Inside Adapter GET");

            string responseData = string.Empty;
            string requestData = string.Empty;

            try
            {
                var commandProcessor = settings.GetCommandProcessor(Protocol.REST);
                var credentials = this.GetCredential();
                WebUtils webUtil = new WebUtils();
                string requestUrl = string.Empty;
                XElement retMessage = new XElement("Envelopes");
                requestData = commandProcessor.PrepareCommand();
                if (string.IsNullOrEmpty(requestData))
                {
                    requestData = settings.ActionName;
                }
                logger.StatusLog("Trying to get data from Zoho", requestData);
                 
                if (settings.CalledFrom == CallerType.ReSync)
                {
                    //ToDo : Parse the requestData into individual object, replace the special character from error filter and send it to the application.
                    XElement resyncData = new XElement("data");
                    foreach (var data in settings.EntityData)
                    {
                        try
                        {
                            requestUrl = $"{credentials.BaseUrl}{settings.EntityName}/{data.SourceCode}";
                            returnData = webUtil.HttpGetRequest(requestUrl, settings, credentials, this._context.ApplicationUtility, logger);
                            if (!returnData.Status && (returnData.Message.Equals("401")))
                            {
                                webUtil.UpdateAccessToken(credentials, this._context.ApplicationUtility);
                                returnData = webUtil.HttpGetRequest(requestUrl, settings, credentials, this._context.ApplicationUtility, logger);
                            }
                            resyncData.Add(XElement.Parse(returnData.Value));
                        }
                        catch (Exception ex)
                        {
                            logger.ErrorLog("Error in Resync : " + ex.Message);
                            logger.StatusLog($"Resync url is : {requestUrl}");
                        }
                    }
                    retMessage.Add(resyncData);
                    //var retMessage = XElement.Parse("<Envelopes>" + resyncData.ToString() + "</Envelopes>");
                    returnMessage.SetSuccess("Data fetched successfully from ZOHO", retMessage.ToString());
                }
                else
                {
                    //ToDo : Send the resource to your application using the credentials and get the response back to responseData object.
                    requestUrl = credentials.BaseUrl + requestData;
                    returnData = webUtil.HttpGetRequest(requestUrl, settings, credentials, this._context.ApplicationUtility, logger);
                    if (!returnData.Status && (returnData.Message.Equals("401")))
                    {
                        webUtil.UpdateAccessToken(credentials, this._context.ApplicationUtility);
                        returnData = webUtil.HttpGetRequest(requestUrl, settings, credentials, this._context.ApplicationUtility, logger);
                    }
                    if (!returnData.Status && returnData.Value.Contains("errorCode"))
                    {
                        returnMessage.SetError(returnData.Value);
                        logger.ErrorLog(returnData.Value);
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(returnData.Value))
                        {
                            retMessage.Add(XElement.Parse(returnData.Value));
                            //var retMessage = XElement.Parse("<Envelopes>" + returnData.Value + "</Envelopes>");
                            AssignPrimaryKeys(settings, retMessage, credentials);
                            if (requestData.Contains("modifiedTimeRange"))
                            {
                                string maxdate = webUtil.GetMaxData(retMessage, "modifiedTime");
                                _context.SetData("lastdate", maxdate);
                            }
                            else if (requestData.Contains("createdTimeRange"))
                            {
                                string maxdate = webUtil.GetMaxData(retMessage, "createdTime");
                                _context.SetData("lastdate", maxdate);
                            }
                            returnMessage.SetSuccess("Data fetched successfully from ZOHO Desk", retMessage.ToString());
                        }
                        else
                        {
                            returnMessage.SetError("Authorized but no data found from ZOHO Desk", returnData.Value);
                        }
                    }
                }
            }
            catch (WebException ex)
            {
                var actualResponse = ex.ReadResponse();
                string errorMessage = string.Format("Exception Caught to pull: {0}. Error Message: {1}", settings.EntityName, actualResponse.Message);

                logger.ErrorLog(errorMessage, ex, ErrorTypes.Sync, Severitys.High);
                returnMessage.SetError(actualResponse.Message);
            }
            catch (Exception ex)
            {
                returnMessage.AddException(ex);
            }

            return returnMessage;
        }

        private void AssignPrimaryKeys(ExecutionSettings settings, XElement xmlElement, CredentialModel credential)
        {
            try
            {
                if (!string.IsNullOrEmpty(settings.PrimaryKeyField))
                {
                    foreach (var element in xmlElement.Descendants("data").Elements(settings.PrimaryKeyField))
                    {
                        if (element != null)
                        {
                            settings.AddSourceEntity(element.Value);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _context.Logger.ErrorLog("Error to AssignPrimaryKeys " + ex.Message);
            }
        }
        private ReturnMessage<SyncInfoDataTable> CreateRecord(params string[] parameters) // send data based on your data record
        {
            try
            {
                var dataObject = new DatabaseInputParameter<SyncInfoDataTable>(DatabaseOperation.INSERT)
                {
                    Object = new SyncInfoDataTable
                    {
                        Id = Guid.NewGuid().ToString()
                    }
                }; 
                return this.Storage.Execute<DatabaseInputParameter<SyncInfoDataTable>, SyncInfoDataTable>(dataObject);
            }
            catch (Exception ex)
            {
                this._context.Logger.ErrorLog("Exception occured while data to the database:", ex.Message);
            }
            return new ReturnMessage<SyncInfoDataTable>();
        }
        private CredentialModel GetCredential()
        {
            CredentialModel model = null;
            var credential = _context.GetConnectionDetails<CredentialModel>();

            if (credential != null) // this indicates that credentails are already saved in configuration, and we can get its value
                model = credential;
                
            return model;
        }

        # endregion
        
        # region APIImplementation
        
        /// <summary>
        /// Generate response for realtime requests such that APIs or Webhook could receive a response
        /// </summary>
        /// <param name="settings"></param>
        /// <returns></returns>
        public ReturnMessage<string> Execute(RealtimeExecutionSettings settings)
        {
            var returnMessage = new ReturnMessage<string>(string.Empty, "Execution unsuccesful");
            
            try 
            {
               string outputresponse = string.Empty;
               //ToDo: Generate a response either by calling Get / Post Operation or completely rewrite and put it in outputresponse. 
               returnMessage.SetSuccess("Response generated", outputresponse);
            }
            catch(Exception ex)
            {
                returnMessage.Message = ex.Message;
                returnMessage.Exceptions.Add(ex);
                returnMessage.SetError("Exception Occured due to" + ex);
            }
            
            return returnMessage;


        }
        /// <summary>
        /// This function is written for validating a real time request
        /// </summary>
        /// <param name="settings">Setting data of a realtime request</param>
        /// <returns>Validation status</returns>
        public ReturnMessage<bool> ValidateRequest(RealtimeExecutionSettings settings)
        {
            var returnMessage = new ReturnMessage<bool>();
            try
            {
                //ToDo: Check and validate the request and return true if request is made from a valid source 
                returnMessage.SetSuccess("Validated successfully");
            }
            catch (Exception ex)
            {
                returnMessage.Message = ex.Message;
                returnMessage.Exceptions.Add(ex);
                returnMessage.SetError("Exception Occured due to" + ex);
            }
            return returnMessage;
        }
        #endregion
    }
}